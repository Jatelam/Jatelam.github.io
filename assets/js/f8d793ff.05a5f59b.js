"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3378],{6754:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=s(4848),t=s(8453);const i={slug:"/ws/protocol/example",sidebar_position:5},a=void 0,o={id:"WEBSOCKET-API/websocket\u534f\u8bae\u57fa\u7840/\u901a\u7528\u6848\u4f8b",title:"\u901a\u7528\u6848\u4f8b",description:"\u901a\u7528\u6848\u4f8b",source:"@site/docs/navis/WEBSOCKET-API/websocket\u534f\u8bae\u57fa\u7840/\u901a\u7528\u6848\u4f8b.md",sourceDirName:"WEBSOCKET-API/websocket\u534f\u8bae\u57fa\u7840",slug:"/ws/protocol/example",permalink:"/navis/ws/protocol/example",draft:!1,unlisted:!1,editUrl:"https://github.com/Jatelam/jatelam.github.io/tree/dev/docs/navis/WEBSOCKET-API/websocket\u534f\u8bae\u57fa\u7840/\u901a\u7528\u6848\u4f8b.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{slug:"/ws/protocol/example",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"PUBLISH\u8bf7\u6c42",permalink:"/navis/ws/protocol/publish"},next:{title:"\u6ce8\u610f\u4e8b\u9879",permalink:"/navis/ws/protocol/note"}},c={},l=[{value:"\u901a\u7528\u6848\u4f8b",id:"\u901a\u7528\u6848\u4f8b",level:4}];function m(e){const n={code:"code",h4:"h4",li:"li",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h4,{id:"\u901a\u7528\u6848\u4f8b",children:"\u901a\u7528\u6848\u4f8b"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5b9e\u73b0\u5b9a\u65f6\u53d1\u9001\u5fc3\u8df3\u6570\u636e\u7684websocket \u5ba2\u6237\u7aef,\u652f\u6301\u53d1\u9001\u8bf7\u6c42\u6570\u636e\uff0c\u5e76\u4e14\u53ef\u6839\u636e\u5b9e\u9645\u9700\u6c42\u4fee\u6539\u8bf7\u6c42\u6570\u636emessage\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'#-*-coding:utf-8-*-\r\nimport asyncio\r\nimport websockets\r\nimport json\r\nimport uuid\r\nimport time\r\n\r\nclass WebSocketClient:\r\n    def __init__(self, uri):\r\n        self.uri = uri\r\n        self.client_id = str(uuid.uuid4())\r\n        self.websocket = None\r\n\r\n    async def connect(self):\r\n        self.websocket = await websockets.connect(self.uri)\r\n        print(f"Connected to {self.uri}")\r\n\r\n    async def send_heartbeat(self):\r\n        while True:\r\n            heartbeat = {\r\n                "op": "ping",\r\n                "id": self.client_id, \r\n                "timeStamp": int(time.time() * 1000)\r\n            }\r\n            \r\n            await self.websocket.send(json.dumps(heartbeat))\r\n            print("Sent heartbeat")\r\n            await asyncio.sleep(5)\r\n\r\n    async def send_message(self, message):\r\n        await self.websocket.send(json.dumps(message))\r\n        print(f"Sent message: {message}")\r\n\r\n    async def receive_messages(self):\r\n        while True:\r\n            response = await self.websocket.recv()\r\n            print(f"Received: {response}")\r\n\r\n    async def run(self):\r\n        await self.connect()\r\n        await asyncio.gather(\r\n            self.send_heartbeat(),\r\n            self.receive_messages()\r\n        )\r\n\r\nasync def main():\r\n    #\u586b\u5199\u5b9e\u9645\u7684\u673a\u5668\u4ebaIP\u5730\u5740,\u5982192.168.1.102\r\n    client = WebSocketClient("ws://192.168.1.102:9090")\r\n    \r\n    # Start the client\r\n    client_task = asyncio.create_task(client.run())\r\n    \r\n    # Example usage: sending different types of messages\r\n    await asyncio.sleep(2)  # Wait for the connection to establish\r\n    \r\n    # Subscribe message\r\n    subscribe_message = {\r\n        "op": "subscribe",\r\n        "topic": "/interface_management/robot_status"\r\n    }\r\n    await client.send_message(subscribe_message)\r\n    \r\n    \r\n    # Call service message\r\n    call_message = {\r\n        "op": "call_service",\r\n        "service": "/set_park_mode",\r\n        "type": "std_srvs/SetBool",\r\n        "args": {\r\n            "data": True\r\n        }\r\n    }\r\n    await client.send_message(call_message)\r\n    \r\n    # Publish message\r\n    publish_message = {\r\n        "op": "publish",\r\n        "topic": "/robot_light_ctl",\r\n        "type": "robot_status_core/RobotLightCmd",\r\n        "msg": {\r\n            "front_mode": 1,\r\n            "front_custom_value": 0,\r\n            "rear_mode": 0,\r\n            "rear_custom_value": 0\r\n        }\r\n    }\r\n    await client.send_message(publish_message)\r\n    \r\n    # Keep the client running\r\n    await client_task\r\n\r\nif __name__ == "__main__":\r\n    asyncio.run(main())\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);