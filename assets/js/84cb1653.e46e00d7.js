"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1297],{8367:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var s=e(4848),t=e(8453);const a={slug:"/document/api/example",sidebar_position:5},i=void 0,o={id:"\u4f7f\u7528\u6848\u4f8b\u6307\u5357/\u4f7f\u7528\u6d41\u7a0b",title:"\u4f7f\u7528\u6d41\u7a0b",description:"\u4f7f\u7528\u6d41\u7a0b",source:"@site/docs/\u4f7f\u7528\u6848\u4f8b\u6307\u5357/\u4f7f\u7528\u6d41\u7a0b.md",sourceDirName:"\u4f7f\u7528\u6848\u4f8b\u6307\u5357",slug:"/document/api/example",permalink:"/docs/document/api/example",draft:!1,unlisted:!1,editUrl:"https://github.com/Jatelam/Jatelam.github.io/docs/\u4f7f\u7528\u6848\u4f8b\u6307\u5357/\u4f7f\u7528\u6d41\u7a0b.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{slug:"/document/api/example",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\u83b7\u53d6\u673a\u5668\u4eba\u4f4d\u7f6e",permalink:"/docs/document/api/odom"},next:{title:"PiPER \u7b80\u4ecb"}},l={},p=[{value:"\u4f7f\u7528\u6d41\u7a0b",id:"\u4f7f\u7528\u6d41\u7a0b",level:3},{value:"c++ demo",id:"c-demo",level:3},{value:"pytho demo",id:"pytho-demo",level:3}];function m(n){const r={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h3,{id:"\u4f7f\u7528\u6d41\u7a0b",children:"\u4f7f\u7528\u6d41\u7a0b"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"\u5b9e\u4f8b\u5316\u4e24\u4e2a\u5ba2\u6237\u7aefhttp client,websocket client"}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"http client"}),": \u7528\u4e8e\u767b\u5f55\u8bf7\u6c42\u4ee5\u53ca\u5176\u4ed6\u8bf7\u6c42,\u83b7\u53d6token,\u7528\u4e8e\u540e\u7eed\u8bf7\u6c42\u4e2d\u7684Authorization\u53c2\u6570\u503c"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"websocket client"}),":\u8fde\u63a5ws\u670d\u52a1\u5668,\u5b9a\u65f61s\u53d1\u9001\u5fc3\u8df3\u5305."]}),"\n"]}),"\n",(0,s.jsxs)(r.ol,{start:"2",children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"\u67e5\u770b\u5f53\u524d\u5bfc\u822a\u72b6\u6001"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"\u542f\u52a8\u5f55\u5305\uff0c\u540d\u79f0\u4e3a'xx'\u7684bag(\u540e\u7eed\u540d\u79f0\u4fdd\u6301\u4e00\u81f4)\uff0c\u4fdd\u6301\u5f55\u5305,\u7ed3\u675f\u5f55\u5305\u3002"}),"\n",(0,s.jsx)(r.li,{children:"\u542f\u52a83d\u5efa\u56fe,\u7ed3\u675f3d\u5efa\u56fe"}),"\n",(0,s.jsx)(r.li,{children:"\u542f\u52a82d\u5efa\u56fe,\u7ed3\u675f2d\u5efa\u56fe"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"\u83b7\u53d6\u5730\u56fe\u5217\u8868,\u53d6\u5f97\u6bcf\u4e2a\u5730\u56fe\u7684\u65f6\u95f4,id,\u5305\u542b\u7684\u4efb\u52a1\u5217\u8868."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"\u83b7\u53d6\u540d\u4e3a'xx'\u7684\u5730\u56fe\u4fe1\u606f,\u5305\u62ec\u5bbd\u5ea6,\u9ad8\u5ea6,\u539f\u70b9,\u5206\u8fa8\u7387\u7b49\u4fe1\u606f,"}),"\n",(0,s.jsx)(r.li,{children:"\u4e0b\u8f7d\u540d\u4e3a'xx'\u7684\u5730\u56fe\u56fe\u7247"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"\u4f7f\u7528'xx'\u5730\u56fe\u8fdb\u884c\u5bfc\u822a"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"png\u56fe\u7247\u5750\u6807\u4e0e\u5bfc\u822a\u5730\u56fe\u5750\u6807\u8f6c\u6362"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"\u4f7f\u7528windows \u7cfb\u7edf\u81ea\u5e26\u7684\u753b\u56fe\u8f6f\u4ef6\u6253\u5f00\u4e0b\u8f7d\u597d\u7684\u5730\u56fepng,\u4f7f\u7528\u9f20\u6807\u70b9\u51fb\u56fe\u7247\u767d\u8272\u533a\u57df\u4efb\u52a1\u70b9,\u5de6\u4e0b\u89d2\u663e\u793a\u8be5\u70b9\u5bf9\u5e94\u7684\u5750\u6807."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["\u5730\u56fe\u4fe1\u606f,\u6839\u636e",(0,s.jsx)(r.code,{children:"/map_info?mapName="}),"\u63a5\u53e3\u83b7\u53d6\u5f53\u524d\u5bfc\u822a\u5730\u56fe\u7684\u5bbd\u5ea6,\u9ad8\u5ea6,\u539f\u70b9,\u5206\u8fa8\u7387\u4fe1\u606f"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"\u6bcf\u6b21\u4f7f\u7528\u65f6\u90fd\u9700\u5148\u8fdb\u884c\u8f6c\u6362,\u518d\u586b\u5199\u5165\u5bf9\u5e94\u7684\u6570\u636e\u4e2d\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"\u5bfc\u822a\u65f6\u53ef\u8fdb\u884c(\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b)\u7684\u64cd\u4f5c"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"\u521d\u59cb\u5316\u4f4d\u7f6e"}),"\n",(0,s.jsx)(r.li,{children:"\u53d1\u5e03\u5b9e\u65f6\u4efb\u52a1"}),"\n",(0,s.jsx)(r.li,{children:"\u5b9a\u5236\u4efb\u52a1"}),"\n",(0,s.jsx)(r.li,{children:"\u53d1\u5e03\u5b9a\u5236\u4efb\u52a1"}),"\n",(0,s.jsx)(r.li,{children:"\u53d6\u6d88\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1"}),"\n",(0,s.jsx)(r.li,{children:"\u7ed3\u675f\u5bfc\u822a"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"c-demo",children:"c++ demo"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["agilex api \u4f7f\u7528demo ",(0,s.jsx)(r.a,{href:"https://github.com/agilexrobotics/Navis",children:"c++\u7248\u672c"})]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"pytho-demo",children:"pytho demo"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'#!/usr/bin/env python\r\nimport asyncio\r\nfrom websocket  import create_connection\r\nimport websockets\r\nimport time\r\nimport requests\r\nimport json\r\nimport numpy as np\r\nimport math\r\nfrom threading import Thread, Timer\r\nimport base64\r\nimport array\r\nimport cv2\r\n\r\n# ws_url = "ws://101.33.245.108:9090" \r\n# http_url = "http://101.33.245.108:9358/apiUrl"\r\nws_url = "ws://10.12.1.126:9090" #\u586b\u5199\u5b9e\u9645\u7684\u673a\u5668\u4ebaIP\u5730\u5740\r\nhttp_url = "http://10.12.1.126/apiUrl"\r\ntoken = None\r\n\r\ndef map_coordinate_to_png(pos, map_info):\r\n    \'\'\'\r\n        \u5750\u6807\u8f6c\u6362\u51fd\u6570:\u5c06\u5bfc\u822a\u65f6\u5b9e\u9645\u4f7f\u7528\u5750\u6807\u8f6c\u6362\u6210\u5730\u56fepng\u56fe\u7247\u5750\u6807\u3002\r\n        \u8f93\u5165\u53c2\u6570:\u5730\u56fe\u5bfc\u822a\u65f6\u7684\u5b9e\u9645\u4f7f\u7528\u5750\u6807, \u5730\u56fepng\u7ed1\u5b9a\u7684yaml\u4fe1\u606f\u6570\u636e,\u5305\u542b\u539f\u70b9,\u5bbd\u5ea6\u9ad8\u5ea6,\u5206\u8fa8\u7387\u3002\r\n        \u8f93\u51fa\u53c2\u6570:\u8f6c\u6210png\u5750\u6807(x,y)\r\n    \'\'\' \r\n    map_pos_x = (pos[0] - map_info[\'originX\']) / map_info[\'resolution\']\r\n    map_pos_y = map_info[\'gridHeight\'] -  (pos[1] - map_info[\'originY\']) / map_info[\'resolution\']\r\n    return (map_pos_x, map_pos_y)\r\n\r\ndef png_coordinate_to_map(pos, map_info):\r\n    """\r\n        \u5750\u6807\u8f6c\u6362\u51fd\u6570:\u5c06\u5730\u56fepng\u56fe\u7247\u5750\u6807\u8f6c\u6362\u6210\u5bfc\u822a\u65f6\u5b9e\u9645\u4f7f\u7528\u5750\u6807\u3002\r\n        \u8f93\u5165\u53c2\u6570:png\u5750\u6807(x,y), \u5730\u56fepng\u7ed1\u5b9a\u7684yaml\u4fe1\u606f\u6570\u636e,\u5305\u542b\u539f\u70b9,\u5bbd\u5ea6\u9ad8\u5ea6,\u5206\u8fa8\u7387\u3002\r\n        \u8f93\u51fa\u53c2\u6570:\u8f6c\u6210\u540e\u7684\u5b9e\u9645\u4f7f\u7528\u5750\u6807\r\n    """\r\n\r\n    png_x = pos[0] * map_info[\'resolution\'] + map_info[\'originX\']\r\n\r\n    png_y = (map_info[\'gridHeight\'] - pos[1]) * map_info[\'resolution\'] + map_info[\'originY\'];\r\n    return (png_x, png_y)\r\n\r\ndef quaternion_from_euler(roll, pitch, yaw):\r\n    """\r\n        \u89d2\u5ea6\u5148\u8f6c\u6210\u5f27\u5ea6\uff0c\u518d\u8f6c\u6362\u6210\u56db\u5143\u7d20,\u8fd4\u56de\u56db\u5143\u7d20\r\n    """\r\n    roll = roll *  (math.pi / 180)\r\n    pitch = pitch *  (math.pi / 180)\r\n    yaw = yaw *  (math.pi / 180)\r\n    qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)\r\n    qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)\r\n    qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)\r\n    qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)\r\n\r\n    return [qx, qy, qz, qw]\r\n\r\ndef quaternion_to_euler(ori):\r\n    """\r\n    \u56db\u5143\u7d20\u8f6c\u6210\u5f27\u5ea6\uff0c\u518d\u8f6c\u6362\u6210\u89d2\u5ea6,\u8fd4\u56deyaw \u89d2\u5ea6\r\n    """\r\n    roll = math.atan2(2 * (ori.w * ori.x + ori.y * ori.z), 1 - 2 * (ori.x * ori.x + ori.y * ori.y))\r\n    pitch = math.asin(2 * (ori.w * ori.y - ori.x * ori.z))\r\n    yaw = math.atan2(2 * (ori.w * ori.z + ori.x * ori.y), 1 - 2 * (ori.z * ori.z + ori.y * ori.y))\r\n    math.degrees(yaw)\r\n    return yaw\r\n\r\nclass WSClient:\r\n    def __init__(self, address):\r\n        self.isconnect = False\r\n        self.ws = create_connection(address)\r\n        if self.ws.connected:\r\n            self.isconnect = True\r\n\r\n        self.input_data = {\r\n            "op": "call_service",\r\n            "service": "/input/op",\r\n            "type":"tools_msgs/input",\r\n            "args": {\r\n                "file_name": "",\r\n                "op_type":"",\r\n                "id_type":""\r\n            }\r\n        }\r\n        self.heart_msg = {\r\n            "op": "ping",\r\n            "timeStamp": 0,\r\n            "id":id_\r\n        }\r\n\r\n    def send_msg(self, args):\r\n        if self.ws is not None:\r\n            msg = json.dumps(args, ensure_ascii=False).encode("utf-8")\r\n            self.ws.send(msg)\r\n\r\n    def receive(self):\r\n        """\r\n        The data returned by the websocket server is in this function \r\n        """\r\n        try:\r\n            while(True):\r\n                print(\'receive_message = \',  self.ws.recv())\r\n        except KeyboardInterrupt:\r\n            print("KeyboardInterrupt")\r\n\r\n    def get_bytes_data(self, args):\r\n        if self.ws is not None:\r\n            msg = json.dumps(args, ensure_ascii=False).encode("utf-8")\r\n            self.ws.send(msg)\r\n            # Used for a single call to an interface test to return bytes data\r\n            return self.ws.recv()\r\n        \r\n\r\n    def publish_data(self, args):\r\n        if self.ws is not None:\r\n            msg = json.dumps(args, ensure_ascii=False).encode("utf-8")\r\n            self.ws.send(msg)\r\n        \r\n    def heart_beat(self):\r\n        if self.isconnect == True:\r\n            self.heart_msg[\'timeStamp\'] = str(time.time()*1000).split(".")[0]\r\n            self.send_msg(self.heart_msg)\r\n            \r\n    def on_close(self):\r\n        if self.ws is not None and self.isconnect:\r\n            self.ws.close()\r\n            self.isconnect = False\r\n\r\n    def call_input(self, op_type, id_type, file_name = \'\'):\r\n        self.input_data[\'args\'][\'file_name\'] = file_name\r\n        self.input_data[\'args\'][\'op_type\'] = id_type\r\n        self.input_data[\'args\'][\'id_type\'] = op_type\r\n\r\n        return self.send_msg(self.input_data)\r\n    \r\n    def record_bag(self, idtype, filename = \'\'):\r\n        self.call_input(op_type = \'record_data\',id_type=idtype, file_name=filename)\r\n\r\n    def mapping_3d(self, idtype, filename = \'\'):\r\n        res = self.call_input(op_type = \'map_3d\',id_type=idtype, file_name=filename)\r\n    \r\n    def mapping_2d(self, idtype, filename = \'\'):\r\n        res = self.call_input(op_type = \'map_2d\',id_type=idtype, file_name=filename)\r\n\r\n    def follow_line(self, idtype, filename = \'\'):\r\n        res = self.call_input(op_type = \'follow_line\',id_type=idtype, file_name=filename)\r\n\r\n    def initial_pos(self, pos:list, angle):\r\n        qua = quaternion_from_euler(0, 0, angle * ( math.pi / 180)  * -1)\r\n\r\n        msg = {\r\n            "op": "publish",\r\n            "topic": "/initialpose",\r\n            "type": "geometry_msgs/PoseWithCovarianceStamped",\r\n            "msg":{\r\n                "header": {"frame_id":"map_2d"},\r\n                "pose":{\r\n                    "pose": {\r\n                        "position": {\r\n                            "x": pos[0],\r\n                            "y": pos[1],\r\n                            "z": 0\r\n                        },\r\n                        "orientation": {\r\n                            "w": qua[3],\r\n                            "z": qua[2],\r\n                            "y": qua[1],\r\n                            "x": qua[0]\r\n                        }\r\n                    },\r\n                    "covariance": [\r\n                        0,0,0,0,0,0,0,0,0,0,0,0,\r\n                        0,0,0,0,0,0,0,0,0,0,0,0,\r\n                        0,0,0,0,0,0,0,0,0,0,0,0\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n        self.publish_data(msg)\r\n\r\n    def sub_slam_status(self):\r\n        msg = {   \r\n            "op": "subscribe",\r\n            "topic": "/slam_status"\r\n            # "type":"nav_msgs/Odometry" \r\n        }\r\n    \r\n        self.send_msg(msg)\r\n\r\n    def sub_robot_status(self):\r\n        msg = {   \r\n            "op": "subscribe",\r\n            "topic": "/dash_board/robot_status"\r\n        }\r\n        self.send_msg(msg)\r\n\r\n    def cancel_nav(self):\r\n        msg = {\r\n                "op": "publish",\r\n                "topic": "/run_management/navi_task/cancel",\r\n                "type": "actionlib_msgs/GoalID",\r\n                "msg":{\r\n                    "stamp": {\r\n                        "secs": 0,\r\n                        "nsecs": 0\r\n                    },\r\n                "id": ""\r\n            }\r\n        }\r\n        self.publish_data(msg)\r\n\r\n    def start_heartbeat_timer(self, interval):\r\n        \r\n        self.timer = threading.Timer(interval, self.start_heartbeat_timer, (interval,))\r\n        self.timer.start()\r\n\r\n        self.heart_beat()\r\n\r\n    def stop_heartbeat_timer(self):\r\n        self.timer.cancel()\r\n\r\n    def sub_pointCloud2(self):\r\n        msg = {   \r\n            "op": "subscribe",\r\n            "topic": "/points_raw"\r\n            #"compression": "cbor" #\u5982\u679c\u5e26\u6709\u8fd9\u6761\u5b57\u6bb5,\u83b7\u53d6\u5230\u7684\u662fbytes\uff0c\r\n        }\r\n        \r\n        # compression \u5b57\u6bb5\u4f7f\u7528\u4e0b\u9762\u63a5\u53e3\u83b7\u53d6\u6570\u636e\r\n        # res = self.get_bytes_data(msg)\r\n        # data_array = array.array(\'B\',res)\r\n        # print(data_array)\r\n\r\n\r\n        # \u65e0compression \u5b57\u6bb5\u4f7f\u7528\u9ed8\u8ba4\u7684\u53d1\u9001\u6570\u636e\u63a5\u53e3\r\n        res = self.send_msg(msg)\r\n        data= res.get("msg").get("data")   \r\n        decode_data = base64.b64decode(data, altchars=None)\r\n        data_array = array.array(\'B\',decode_data)\r\n        # print(data_array)\r\n\r\n\r\n    def sub_scan(self):\r\n        msg = {   \r\n            "op": "subscribe",\r\n            "topic": "/scan",\r\n            "compression": "cbor" #\u5982\u679c\u5e26\u6709\u8fd9\u6761\u5b57\u6bb5,\u83b7\u53d6\u5230\u7684\u662fbytes\uff0c\r\n\r\n        }\r\n    \r\n        # \u6709compression \u5b57\u6bb5\u4f7f\u7528\u4e0b\u9762\u63a5\u53e3\u83b7\u53d6\u6570\u636e\r\n        res = self.get_bytes_data(msg)\r\n        data_array = array.array(\'B\',res)\r\n        print(data_array)\r\n        \r\n        # \u65e0compression \u5b57\u6bb5\u4f7f\u7528\u9ed8\u8ba4\u7684\u53d1\u9001\u6570\u636e\u63a5\u53e3\r\n        # res = self.send_msg(msg)\r\n        # data= res.get("msg").get("ranges")\r\n        # print(data)    \r\n\r\n    def sub_camera_pointCloud(self):\r\n        msg = {   \r\n            "op": "subscribe",\r\n            "topic": "/camera/color/image_raw"\r\n            # "compression": "cbor" \r\n        }\r\n    \r\n        # compression \u5b57\u6bb5\u4f7f\u7528\u4e0b\u9762\u63a5\u53e3\u83b7\u53d6\u6570\u636e\r\n        message = self.send_msg(msg)\r\n        # data_array = array.array(\'B\',message)\r\n        \r\n        image_data = message["msg"][\'data\']\r\n        \r\n        decode_data = base64.b64decode(image_data, altchars=None)\r\n        img_array = array.array(\'B\',decode_data)\r\n        # img_array = bytearray(\'B\', image_data)\r\n        img_array = np.frombuffer(img_array, np.uint8)\r\n    \r\n        # print(img_array)\r\n        image_ = cv2.imdecode(img_array, cv2.IMREAD_COLOR)\r\n        image_name = R"E:\\workspace\\userapi\\test\\te.jpg"\r\n        cv2.imwrite(image_name, image_)\r\n\r\n        # # Build the image format and dimensions\r\n        # format = message[\'encoding\']\r\n        # width = message[\'width\']\r\n        # height = message[\'height\']\r\n\r\n        # # Build the PIL Image object\r\n        # # image = Image.frombytes(format, (width, height), base64.b64decode(image_data))\r\n        # image = Image.frombytes(format, (width, height), image_data)\r\n\r\n        # # Save the image as a picture file\r\n    \r\n        # image.save(image_name)\r\n        \r\n    def sub_task_status(self):\r\n        msg = {   \r\n            "op": "subscribe",\r\n            "topic": "/run_management/task_status"\r\n        }\r\n       self.send_msg(msg)\r\n\r\nclass HttpClient():\r\n    def __init__(self, url):\r\n        self.url = url\r\n        self.token = None\r\n        self.map_list = None\r\n\r\n    def login_(self):\r\n        url = self.url + \'/user/passport/login\'\r\n\r\n        payload = json.dumps({\r\n            "username": "agilex",\r\n            "password": "NTdhMTE5NGNiMDczY2U4YjNiYjM2NWU0YjgwNWE5YWU="\r\n        })\r\n        headers = {\r\n            \'Content-Type\': \'application/json\'\r\n        }\r\n\r\n        response = requests.request("POST", url, headers=headers, data=payload)\r\n        token = json.loads(response.text)\r\n        self.token = token.get(\'data\')\r\n\r\n    def get_maplist(self):\r\n        url = self.url + "/map_list?page=1&limit=-1&sortType=&reverse="\r\n        \r\n        headers = {\r\n            \'Authorization\': self.token\r\n        }\r\n\r\n        response = requests.request("GET", url, headers=headers)\r\n        res_json = json.loads(response.text)\r\n        self.map_list = res_json.get(\'data\')\r\n        print(\'aaa\', self.map_list)\r\n\r\n    def get_map_png(self, map_name):\r\n        url = self.url + "/downloadpng?mapName=" + map_name\r\n        \r\n        headers = {\r\n            \'Authorization\': self.token,\r\n            \'Content-Type\': \'application/x-www-form-urlencoded\'\r\n        }\r\n\r\n        response = requests.request("GET", url, headers=headers)\r\n        \r\n        filepath = (r\'C:\\Users\\admin\\Desktop\\/{}.png\'.format(map_name))\r\n        with open(filepath, \'wb\') as f:\r\n            f.write(response.content)\r\n\r\n    def get_map_info(self, map_name):\r\n        url = self.url + "/map_info?mapName=" + map_name #mapName\u662f\u5355\u4e2a\u5730\u56fe\u540d\u79f0\uff0c\u4e0d\u7528\u5305\u542b.png\r\n        \r\n        headers = {\r\n            \'Authorization\': self.token,\r\n            \'Content-Type\': \'application/json\'\r\n        }\r\n\r\n        response = requests.request("GET", url, headers=headers)\r\n        \r\n        res_json = json.loads(response.text)\r\n        if res_json.get(\'data\'):\r\n            return res_json.get(\'data\')[\'mapInfo\']\r\n        else:\r\n            return None\r\n\r\n    def run_realtime_task(self, pos:list):\r\n\r\n        payload = json.dumps(\r\n        {\r\n            "loopTime": 1, \r\n            "points": [\r\n            { \r\n                "position": {\r\n                    "x": pos[0],\r\n                    "y": pos[1],\r\n                    "theta": pos[2]\r\n                },\r\n                "isNew": False,\r\n                "cpx": 0,\r\n                "cpy": 0\r\n            }],\r\n            "mode": "point"# mode = path \u65f6\u9700\u8981\u8bbe\u7f6e\u591a\u4e2a\u70b9,\u8fdb\u884c\u8def\u5f84\u5bfc\u822a\r\n        })\r\n        \r\n        url = self.url + "/realtime_task"\r\n        \r\n        headers = {\r\n            \'Authorization\': self.token,\r\n            \'Content-Type\': \'application/json\'\r\n        }\r\n\r\n        response = requests.request("POST", url, headers=headers,data=payload)\r\n        res_json = json.loads(response.text)\r\n\r\n        if res_json.get(\'code\') == 0 or res_json.get(\'successed\')== True:\r\n            print(\'success~~~\')\r\n\r\n    def run_list_task(self, map_name, task_name, looptime: int):\r\n        payload = {\r\n            "mapName": map_name, \r\n            "taskName": task_name,\r\n            "loopTime":looptime\r\n        }\r\n        \r\n        url = self.url + "/run_list_task"\r\n        \r\n        headers = {\r\n            \'Authorization\': self.token,\r\n            \'Content-Type\': \'application/json\'\r\n        }\r\n\r\n        response = requests.request("POST", url, headers=headers, data=json.dumps(payload))\r\n    \r\n        res_json = json.loads(response.text)\r\n        if res_json.get(\'success\') == True:\r\n            print(\'success~~~\')\r\n\r\n    def set_list_task(self):\r\n        payload = {\r\n            "mode": "point",\r\n            "speed": 1,\r\n            "evadible": 1,\r\n            "points": [\r\n                {\r\n                "isNew": True,\r\n                "index": "point-1",\r\n                "pointType": "navigation",\r\n                "pointName": "",\r\n                "actions": [],\r\n                "position": {\r\n                    "x": -3.35,\r\n                    "y": 37.48,\r\n                    "theta": 78.24   \r\n                },\r\n                "cpx": 0,\r\n                "cpy": 0\r\n                },\r\n                {\r\n                "isNew": True,\r\n                "index": "point-2",\r\n                "pointType": "navigation",\r\n                "pointName": "",\r\n                "actions": [],\r\n                "position": {     \r\n                    "x": -2.45,\r\n                    "y": 34.53,\r\n                    "theta": 169.32\r\n                },\r\n                "cpx": 0,\r\n                "cpy": 0\r\n                }\r\n            ],\r\n            "mapName": "office",\r\n            "taskName": "p1",\r\n            "editedName": "p1",\r\n            "gridItemIdx": 0,\r\n            "remark": "",\r\n            "personName": ""\r\n        }\r\n\r\n        url = self.url + "/set_task"\r\n        \r\n        headers = {\r\n            \'Authorization\': self.token,\r\n            \'Content-Type\': \'application/json\'\r\n        }\r\n\r\n        response = requests.request("POST", url, headers=headers, data=json.dumps(payload))\r\n\r\n        res_json = json.loads(response.text)\r\n        if res_json.get(\'code\') == 0 or res_json.get(\'successed\')== True:\r\n            print(\'set task success~~~\')\r\n\r\n\r\nimport threading\r\nif __name__ == \'__main__\':\r\n    ### Http \u5ba2\u6237\u7aef\r\n    http_client =  HttpClient(http_url)\r\n    http_client.login_()\r\n\r\n    ### websocket \u5ba2\u6237\u7aef\r\n    ws_client =  WSClient(ws_url, "aa-sss-1")\r\n    ## \u5b9a\u65f6\u53d1\u9001\u5fc3\u8df3\u5305\r\n    ws_client.start_heartbeat_timer(2)\r\n\r\n    ###  \u8ba2\u9605\u8bbe\u5907\u5f53\u524d\u5bfc\u822a\u72b6\u6001\r\n    ws_client.sub_task_status()\r\n    # \u5982\u679c\u5355\u5f00\u7ebf\u7a0b\u6765 \u8dd1\u63a5\u6536\u6570\u636e\u51fd\u6570\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u9000\u51fa\u7a0b\u5e8f\r\n    # heartbeat_thread = threading.Thread(target= ws_client.receive)\r\n    # heartbeat_thread.start()\r\n    ws_client.sub_robot_status()\r\n    ws_client.sub_slam_status()\r\n    # \u6ce8\u610f\u8fd9\u91cc\u4f1a\u963b\u585e,\u53ef\u4ee5\u653e\u5230\u6700\u540e\r\n    ws_client.receive() \r\n\r\n\r\n    ###  \u8ba2\u9605\u6fc0\u5149\u96f7\u8fbe3D\u70b9\u4e91\u6570\u636e\r\n    # ws_client.sub_pointCloud2()\r\n\r\n    ###  \u8ba2\u9605\u6fc0\u5149\u96f7\u8fbe2D\u70b9\u4e91\u6570\u636e,\u53ea\u6709\u5728\u5f00\u542f\u5bfc\u822a\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u8ba2\u9605\u5f97\u5230\u6570\u636e\r\n    # ws_client.sub_scan()\r\n\r\n    ##  \u8ba2\u9605\u76f8\u673a\u6570\u636e\r\n    # data1 =  ws_client.sub_camera_pointCloud()\r\n\r\n    # save_image(data1)\r\n    \r\n    map_name = \'office\'\r\n\r\n    \'\'\'\r\n    ### \u5f55\u5305->\u5efa\u56fe->\u542f\u52a8\u5bfc\u822a->\u6d41\u7a0b\r\n    \r\n    ### \u542f\u52a8\u5f55\u5305,\u95f4\u969410\u79d2\u7ed3\u675f\u5f55\u5305,\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u9700\u6c42\u8bbe\u7f6e\u5b9e\u9645\r\n    time_1 = 10\r\n    time_2 = 5\r\n    ws_client.record_bag(idtype="start", filename=map_name)\r\n    time.sleep(time_1)\r\n\r\n    ws_client.record_bag(idtype="stop", filename=map_name)\r\n    time.sleep(time_2)\r\n\r\n    ### \u542f\u52a83d\u5efa\u56fe,\u95f4\u969410\u79d2\u7ed3\u675f3d\u5efa\u56fe\r\n    ws_client.mapping_3d(idtype="start", filename=map_name)\r\n    time.sleep(time_1)\r\n\r\n    ws_client.mapping_3d(idtype="stop", filename=map_name)\r\n    time.sleep(time_2)\r\n\r\n    ### \u542f\u52a82d\u5efa\u56fe,\u95f4\u969410\u79d2\u7ed3\u675f2d\u5efa\u56fe\r\n    ws_client.mapping_2d(idtype="start", filename=map_name)\r\n    time.sleep(time_1)\r\n    ws_client.mapping_2d(idtype="stop", filename=map_name)\r\n    time.sleep(time_2)\r\n\r\n    ### \u542f\u52a8\u5bfc\u822a\r\n    ws_client.follow_line(idtype="start", filename=map_name)\r\n    \'\'\'\r\n\r\n    ###\u83b7\u53d6\u5730\u56fe\u5217\u8868\r\n    # http_client.get_maplist()\r\n\r\n    ###\u83b7\u53d6\u67d0\u5f20\u5730\u56fe\r\n    # http_client.get_map_png(map_name),#\u4e0b\u8f7d\u5230\u672c\u5730,\u8def\u5f84\u9700\u4fee\u6539,\r\n\r\n    ### \u83b7\u53d6\u5730\u56fe\u5bf9\u5e94\u7684\u4fe1\u606f\r\n    # map_info = http_client.get_map_info(map_name)\r\n    # print(map_info)\r\n\r\n    ### \u4f7f\u7528windows \u7cfb\u7edf\u81ea\u5e26\u7684\u753b\u56fe\u8f6f\u4ef6\u6253\u5f00\u4e0b\u8f7d\u597d\u7684\u5730\u56fepng,\u4f7f\u7528\u9f20\u6807\u70b9\u51fb\u56fe\u7247\u767d\u8272\u533a\u57df\u4efb\u52a1\u70b9,\u5de6\u4e0b\u89d2\u663e\u793a\u8be5\u70b9\u5bf9\u5e94\u7684\u5750\u6807\r\n    ### \u4f7f\u7528,\u6807\u8f6c\u6362\u6210\u5730\u56fe\u771f\u5b9e\u5750\u6807\uff0c\u5982\u4e0b\u5750\u6807[x,y]\r\n    # png_coor = [960,275]\r\n    # if map_info:\r\n    #     pos_x,pos_y =  png_coordinate_to_map(png_coor, map_info)\r\n    #     print("1 ",pos_x, pos_y)\r\n\r\n\r\n\r\n    ## \u8bbe\u7f6e\u521d\u59cb\u5316\u70b9\r\n    # ws_client.initial_pos([pos_x, pos_y], 80)\r\n\r\n    ### \u8bbe\u7f6e\u5bfc\u822a\u76ee\u6807\u70b9,\u6267\u884c\u5b9e\u65f6\u4efb\u52a1\r\n    # http_client.run_realtime_task([pos_x, pos_y, 80])\r\n\r\n    ### \u8bbe\u7f6e\u5217\u8868\u4efb\u52a1\r\n    # http_client.set_list_task()\r\n\r\n    ### \u6267\u884c\u5217\u8868\u4efb\u52a1\r\n    # http_client.run_list_task(map_name=map_name, task_name=\'p1\', looptime=1)\r\n\r\n    ### \u7ed3\u675f\u4efb\u52a1\r\n    # ws_client.cancel_nav()\r\n\r\n    ### \u5173\u95ed\u5bfc\u822a\r\n    #ws_client.follow_line(idtype="stop", filename=map_name)\r\n\r\n    # ws_client.on_close()\r\n\r\n\n'})})]})}function d(n={}){const{wrapper:r}={...(0,t.R)(),...n.components};return r?(0,s.jsx)(r,{...n,children:(0,s.jsx)(m,{...n})}):m(n)}},8453:(n,r,e)=>{e.d(r,{R:()=>i,x:()=>o});var s=e(6540);const t={},a=s.createContext(t);function i(n){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function o(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(a.Provider,{value:r},n.children)}}}]);